
define('AssetLoader',[],function () {
    

    function AssetLoader() {
        this.images = [];
        this.queue = {
            'images': []
        };
    }

    AssetLoader.prototype.add = function (type, key, path) {
        var item = {
            'key':  key,
            'path': path
        };
        if (type === 'image') {
            this.queue.images.push(item);
        }
    };

    AssetLoader.prototype.load = function () {
        try {
            if (this.queue.images.length === 0 && this.queue.sounds.length === 0) {
                throw new Error('No assets found to load');
            }
            for (var i = 0; i < this.queue.images.length; i++) {
                var image = new Image();
                image.src = this.queue.images[i].path;
                this.images[this.queue.images[i].key] = image;
            }
        } catch (e) {
            console.error(e.message);
        } finally {
            this.queue.images = [];
        }
        document.dispatchEvent(new Event('hasLoaded'));
        return this;
    };

    return AssetLoader;
});

define('Renderer',[],function () {
    

    function Renderer(width, height) {
        this.width = width;
        this.height = height;
        this.renderHotspots = false;

        this.canvas = document.createElement('canvas');
        this.canvas.id = 'cags-viewport';
        this.canvas.width = this.width;
        this.canvas.height = this.height;
        document.body.appendChild(this.canvas);
    }

    Renderer.prototype.clear = function () {
    
    };

    Renderer.prototype.draw = function () {
    
    };

    return Renderer;
});

define('CAGS',[
    'AssetLoader',
    'Renderer'
], function (
    AssetLoader,
    Renderer
) {
    

    function CAGS() {
        this.renderer = new Renderer(640, 480);
        this.polyfillAnimationFrame();
        this.eventListeners();

        this.assets = new AssetLoader();
        this.assets.add('image', 'test-background', '/assets/img/test-back.png');
        this.assets.load();
    }

    CAGS.prototype.eventListeners = function () {
        var _this = this;
        document.addEventListener('hasLoaded', function () {
            _this.loop();
        });
    };

    // RequestAnimationFrame polyfill by Paul Irish
    // http://www.paulirish.com/2011/requestanimationframe-for-smart-animating/
    CAGS.prototype.polyfillAnimationFrame = function () {
        var lastTime = 0;
        var vendors = ['webkit', 'moz'];
        for (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {
            window.requestAnimationFrame = window[vendors[x] + 'RequestAnimationFrame'];
            window.cancelAnimationFrame =
              window[vendors[x] + 'CancelAnimationFrame'] || window[vendors[x] + 'CancelRequestAnimationFrame'];
        }
        if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = function(callback, element) {
                var currTime = new Date().getTime();
                var timeToCall = Math.max(0, 16 - (currTime - lastTime));
                var id = window.setTimeout(function() { callback(currTime + timeToCall); }, timeToCall);
                lastTime = currTime + timeToCall;
                return id;
            };
        }
        if (!window.cancelAnimationFrame) {
            window.cancelAnimationFrame = function(id) {
                clearTimeout(id);
            };
        }
    };

    CAGS.prototype.loop = function () {
        this.update();
        this.draw();
        requestAnimationFrame(this.loop.bind(this));
    };

    CAGS.prototype.update = function () {

    };

    CAGS.prototype.draw = function () {

    };

    return CAGS;

});

require([
    'CAGS'
], function (
    CAGS
) {
    

    (function () {
        window.cags = new CAGS();
    })();
});


define("main", function(){});
