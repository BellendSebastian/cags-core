
define('AssetLoader',[],function () {
    

    function AssetLoader() {
        this.images = [];
        this.queue = {
            'images': []
        };
    }

    AssetLoader.prototype.add = function (type, key, path) {
        var item = {
            'key':  key,
            'path': path
        };
        if (type === 'image') {
            this.queue.images.push(item);
        }
    };

    AssetLoader.prototype.load = function () {
        try {
            if (this.queue.images.length === 0 && this.queue.sounds.length === 0) {
                throw new Error('No assets found to load');
            }
            for (var i = 0; i < this.queue.images.length; i++) {
                var image = new Image();
                image.src = this.queue.images[i].path;
                this.images[this.queue.images[i].key] = image;
            }
        } catch (e) {
            console.error(e.message);
        } finally {
            this.queue.images = [];
        }
        document.dispatchEvent(new Event('hasLoaded'));
        return this;
    };

    AssetLoader.prototype.get = function (key) {
        try {
            if (this.images[key] === undefined) {
                throw new Error('No asset found with the key: ' + key);
            } else {
                return this.images[key];
            }
        } catch (e) {
            throw new Error(e.message);
        }
    };

    return AssetLoader;
});

define('Renderer',[],function () {
    

    function Renderer(width, height) {
        this.width = width;
        this.height = height;
        this.renderHotspots = false;
        this.screen = null;

        this.canvas = document.createElement('canvas');
        this.canvas.id = 'cags-viewport';
        this.canvas.width = this.width;
        this.canvas.height = this.height;
        document.body.appendChild(this.canvas);
        this.context = this.canvas.getContext('2d');
    }

    Renderer.prototype.clear = function () {
        return this;
    };

    Renderer.prototype.draw = function () {
        this.clear();
        if (this.screen === null) {
            throw new Error('No Screen exists to render.');
        }
        this.context.drawImage(this.screen.getBackground(), 0, 0);
    };

    Renderer.prototype.setScreen = function (screen) {
        this.screen = screen;
    };

    return Renderer;
});

define('Screen',[],function () {
    

    function Screen(background) {
        this.background = background;
        this.hotspots = [];
    }

    Screen.prototype.getBackground = function () {
        return this.background;
    };

    Screen.prototype.addHotspot = function (hotspot) {
        this.hotspots.push(hotspot);
        return this;
    };

    Screen.prototype.removeHotspot = function (hotspot) {
        this.hotspots.splice(hotspot, 1);
        return this;
    };

    return Screen;
});

define('Point',[],function () {
    

    function Point(x, y) {
        this.x = x;
        this.y = y;
    }

    return Point;
});

define('Creature',[
    'Point'
], function (
    Point
) {
    

    function Creature(position, sprite) {
        this.position = position;
        this.sprite = sprite;
        this.tileWidth = null;
        this.tileHeight = null;
    }

    return Creature;
});

define('Player',[
    'Creature'
], function (
    Creature
) {
    

    Player.prototype = new Creature();
    Player.prototype.constructor = Player;

    function Player(position, sprite) {
        Creature.call(this, position, sprite);
        this.inventory = [];
        this.tileWidth = 20;
        this.tileHeight = 30;
        this.currentFrame = 0;
        this.maxFrames = 3;
        this.animationDelay = 0;
    }

    Player.prototype.load = function () {

    };

    Player.prototype.save = function () {

    };

    Player.prototype.drawWalking = function (context) {
        context.drawImage(this.sprite, this.currentFrame * this.tileWidth, 0, this.tileWidth, this.tileHeight, this.position.x - (this.tileWidth / 2), this.position.y - this.tileHeight, this.tileWidth, this.tileHeight);
        if (this.animationDelay === 5) {
            if (this.currentFrame < this.maxFrames) {
                this.currentFrame++;
            } else {
                this.currentFrame = 0;
            }
            this.animationDelay = 0;
        } else {
            this.animationDelay++;
        }
    };

    Player.prototype.moveTo = function (point) {
        this.position = point;
    };

    return Player;
});

define('Input',[
    'Point'
], function (
    Point
) {
    

    function Input(canvas, player) {
        this.canvas = canvas;
        this.player = player;
        this.eventHandlers();
    }

    Input.prototype.eventHandlers = function () {
        this.canvas.addEventListener('mousedown', this.mouseDown.bind(this), false);
        this.canvas.addEventListener('mouseup', this.mouseUp.bind(this), false);
    };

    Input.prototype.mouseDown = function () {
        console.log('mousedown');
    };

    Input.prototype.mouseUp = function (event) {
        this.player.moveTo(new Point(event.offsetX, event.offsetY));
    };

    return Input;
});

define('CAGS',[
    'AssetLoader',
    'Renderer',
    'Screen',
    'Point',
    'Player',
    'Input'
], function (
    AssetLoader,
    Renderer,
    Screen,
    Point,
    Player,
    Input
) {
    

    function CAGS() {
        this.renderer = new Renderer(640, 480);
        this.polyfillAnimationFrame();
        this.eventListeners();

        this.assets = new AssetLoader();
        this.assets.add('image', 'test-background', '/assets/img/test-back.png');
        this.assets.add('image', 'test-spritesheet', '/assets/img/test-sprite.png');
        this.assets.load();
    }

    CAGS.prototype.afterLoad = function () {
        this.renderer.setScreen(new Screen(this.assets.get('test-background')));
        this.player = new Player(new Point(0, 0), this.assets.get('test-spritesheet'));
        this.input = new Input(this.renderer.canvas, this.player);
        this.loop();
    };

    CAGS.prototype.eventListeners = function () {
        var _this = this;
        document.addEventListener('hasLoaded', function () {
            _this.afterLoad();
        });
    };

    // RequestAnimationFrame polyfill by Paul Irish
    // http://www.paulirish.com/2011/requestanimationframe-for-smart-animating/
    CAGS.prototype.polyfillAnimationFrame = function () {
        var lastTime = 0;
        var vendors = ['webkit', 'moz'];
        for (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {
            window.requestAnimationFrame = window[vendors[x] + 'RequestAnimationFrame'];
            window.cancelAnimationFrame =
              window[vendors[x] + 'CancelAnimationFrame'] || window[vendors[x] + 'CancelRequestAnimationFrame'];
        }
        if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = function(callback, element) {
                var currTime = new Date().getTime();
                var timeToCall = Math.max(0, 16 - (currTime - lastTime));
                var id = window.setTimeout(function() { callback(currTime + timeToCall); }, timeToCall);
                lastTime = currTime + timeToCall;
                return id;
            };
        }
        if (!window.cancelAnimationFrame) {
            window.cancelAnimationFrame = function(id) {
                clearTimeout(id);
            };
        }
    };

    CAGS.prototype.loop = function () {
        try {
            this.update();
            this.draw();
            requestAnimationFrame(this.loop.bind(this));
        } catch (e) {
            console.error(e.message);
        }
    };

    CAGS.prototype.update = function () {

    };

    CAGS.prototype.draw = function () {
        try {
            this.renderer.draw();
            this.player.drawWalking(this.renderer.context);
        } catch (e) {
            throw new Error(e);
        }
    };

    return CAGS;

});

require([
    'CAGS'
], function (
    CAGS
) {
    

    (function () {
        window.cags = new CAGS();
    })();
});


define("main", function(){});
